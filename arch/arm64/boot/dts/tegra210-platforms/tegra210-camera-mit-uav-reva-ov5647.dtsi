/*
 * Copyright (c) 2015-2016, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/platform/t210/t210.h>

#define GANG_MODE_L_R 1
#define GANG_MODE_T_B 2
#define GANG_MODE_R_L 3
#define GANG_MODE_B_T 4

//#define CAM0_RST_L	TEGRA_GPIO(E, 5)
#define CAM0_RST_L	TEGRA_GPIO(G, 8)

//#define CAM_MUX0    TEGRA_GPIO(T, 1)
#define CAM_MUX0    TEGRA_GPIO(G, 7)
//#define CAM_MUX1    TEGRA_GPIO(S, 6)
#define CAM_MUX1    TEGRA_GPIO(D, 7)

//GPIOs
/ {
	/* set camera gpio direction to output */
	gpio: gpio@6000d000 {
		camera-control {
			gpio-output-low = <
												CAM0_RST_L
												CAM_MUX0
												CAM_MUX1
												>;
		};
	};
};


/ {
	host1x {
		vi_base: vi {
			num-channels = <1>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				vi_port0: port@0 {
					status = "okay";
					reg = <0>;
					ov5647_vi_in0: endpoint {
						status = "okay";
						csi-port = <0>;
						bus-width = <2>;
						remote-endpoint = <&ov5647_out0>;
					};
				};
			};
		};

		i2c@546c0000 {
			status = "okay";
			#address-cells = <1>;
			#size-cells = <0>;
			ov5647_a@36 {
				compatible = "nvidia,ov5647";
				/* I2C device address */
				reg = <0x36>;
				reset-gpios = <&gpio CAM0_RST_L GPIO_ACTIVE_LOW>;

		    /* Physical dimensions of sensor */
				physical_w = "3.674";
				physical_h = "2.738";


				/* Sensor Model */
				sensor_model ="ov5647";

				/* Define any required hw resources needed by driver */
				/* ie. clocks, io pins, power sources */
				//avdd-reg = "vana";
				//iovdd-reg = "vif";
				//dvdd-reg = "vdig";
				clocks = <&tegra_car TEGRA210_CLK_ID_CLK_OUT_3>;
				clock-names = "mclk";
				clock-frequency = <24000000>;
				mclk = "cam_mclk1";

				/* Defines number of frames to be dropped by driver internally after applying */
				/* sensor crop settings. Some sensors send corrupt frames after applying */
				/* crop co-ordinates */
				post_crop_frame_drop = "0";

				/**
				* A modeX node is required to support v4l2 driver
				* implementation with NVIDIA camera software stack
				*
				* mclk_khz = "";
				* Standard MIPI driving clock, typically 24MHz
				*
				* num_lanes = "";
				* Number of lane channels sensor is programmed to output
				*
				* tegra_sinterface = "";
				* The base tegra serial interface lanes are connected to
				*
				* discontinuous_clk = "";
				* The sensor is programmed to use a discontinuous clock on MIPI lanes
				*
				* dpcm_enable = "true";
				* The sensor is programmed to use a DPCM modes
				*
				* cil_settletime = "";
				* MIPI lane settle time value.
				* A "0" value attempts to autocalibrate based on mclk_multiplier
				*
				*
				*
				*
				* active_w = "";
				* Pixel active region width
				*
				* active_h = "";
				* Pixel active region height
				*
				* pixel_t = "";
				* The sensor readout pixel pattern
				*
				* readout_orientation = "0";
				* Based on camera module orientation.
				* Only change readout_orientation if you specifically
				* Program a different readout order for this mode
				*
				* line_length = "";
				* Pixel line length (width) for sensor mode.
				* This is used to calibrate features in our camera stack.
				*
				* mclk_multiplier = "";
				* Multiplier to MCLK to help time hardware capture sequence
				* TODO: Assign to PLL_Multiplier as well until fixed in core
				*
				* pix_clk_hz = "";
				* Sensor pixel clock used for calculations like exposure and framerate
				*
				*
				*
				*
				* inherent_gain = "";
				* Gain obtained inherently from mode (ie. pixel binning)
				*
				* min_gain_val = ""; (floor to 6 decimal places)
				* max_gain_val = ""; (floor to 6 decimal places)
				* Gain limits for mode
				*
				* min_exp_time = ""; (ceil to integer)
				* max_exp_time = ""; (ceil to integer)
				* Exposure Time limits for mode (us)
				*
				*
				* min_hdr_ratio = "";
				* max_hdr_ratio = "";
				* HDR Ratio limits for mode
				*
				* min_framerate = "";
				* max_framerate = "";
				* Framerate limits for mode (fps)
				*
				* embedded_metadata_height = "";
				* Sensor embedded metadata height in units of rows.
				* If sensor does not support embedded metadata value should be 0.
				*/

				mode0 { // OV5647_MODE_1920X1080
					mclk_khz = "24000";
					num_lanes = "2";
					//mclk_multiplier = "49.0";
          //My Stuff
					//pix_clk_hz = "1176000000";
					//pix_clk_hz   =  "588000000";
					//line_length = "2416";


          //Their Stuff
					mclk_multiplier = "17.0";
					pix_clk_hz = "160000000";
					line_length = "2688";
          //Done




					tegra_sinterface = "serial_a";
					discontinuous_clk = "yes";
					cil_settletime = "0";
					pixel_t = "bayer_bggr";
					readout_orientation = "0";
					inherent_gain = "1";

					//active_w = "2322";
					//active_h = "1104";
					active_w = "1920";
					active_h = "1080";

					//line_length = "1927";

					min_gain_val = "1.0";
					max_gain_val = "16.0";
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "1";
					max_framerate = "30";
					min_exp_time = "25";
					max_exp_time = "683709";
				};
				mode1 { // OV5647_MODE_1280X720
					mclk_khz = "24000";
					num_lanes = "2";
					mclk_multiplier = "52.5";
					pix_clk_hz = "1260000000";

					tegra_sinterface = "serial_a";
					discontinuous_clk = "yes";
					cil_settletime = "0";
					pixel_t = "bayer_bggr";
					readout_orientation = "0";
					inherent_gain = "1";

					active_w = "1280";
					active_h = "720";

					//line_length = "2623";
					line_length = "1896";

					min_gain_val = "1.0";
					max_gain_val = "16.0";
					min_hdr_ratio = "1";
					max_hdr_ratio = "1";
					min_framerate = "1";
					max_framerate = "60";
					min_exp_time = "22";
					max_exp_time = "683709";

				};

				ports {
					#address-cells = <1>;
					#size-cells = <0>;

					port@0 {
						reg = <0>;
						ov5647_out0: endpoint {
							csi-port = <0>;
							bus-width = <2>;
							remote-endpoint = <&ov5647_vi_in0>;
						};
					};
				};
			};
		};
	};

	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";

		/**
		* The general guideline for naming badge_info contains 3 parts, and is as follows,
		* The first part is the camera_board_id for the module; if the module is in a FFD
		* platform, then use the platform name for this part.
		* The second part contains the position of the module, ex. “rear” or “front”.
		* The third part contains the last 6 characters of a part number which is found
		* in the module's specsheet from the vender.
		*/
		modules {
			cam_module0: module0 {
				badge = "uav_back_ov5647";
				position = "rear";
				orientation = "1";
				cam_module0_drivernode0: drivernode0 {
					/* Declare PCL support driver (classically known as guid)  */
					pcl_id = "v4l2_sensor";
					/* Driver's v4l2 device name */
					devname = "ov5647 6-0036";
					/* Declare the device-tree hierarchy to driver instance */
					proc-device-tree = "/proc/device-tree/host1x/i2c@546c0000/ov5647_a@36";
          status = "okay";
				};
        cam_module0_dirvernode1: drivernode1 {
					status = "disabled";
					pcl_id = "v4l2_focuser_stub";
					proc-device-tree = "";

        };
			};
		};
	};
};
